[{"/mnt/c/Users/icecr/job/mvp/app/react-app/src/index.js":"1","/mnt/c/Users/icecr/job/mvp/app/react-app/src/reportWebVitals.js":"2","/mnt/c/Users/icecr/job/mvp/app/react-app/src/App.js":"3","/mnt/c/Users/icecr/job/mvp/app/react-app/src/Reddit.jsx":"4","/mnt/c/Users/icecr/job/mvp/app/react-app/src/AltCoins.jsx":"5","/mnt/c/Users/icecr/job/mvp/app/react-app/src/Graph.jsx":"6","/mnt/c/Users/icecr/job/mvp/app/react-app/src/GraphOptions.jsx":"7","/mnt/c/Users/icecr/job/mvp/app/react-app/src/GraphSearchBar.jsx":"8"},{"size":500,"mtime":1608621680425,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1608621680452,"results":"11","hashOfConfig":"10"},{"size":2956,"mtime":1609733352879,"results":"12","hashOfConfig":"10"},{"size":3116,"mtime":1609701983842,"results":"13","hashOfConfig":"10"},{"size":2375,"mtime":1609735070613,"results":"14","hashOfConfig":"10"},{"size":1014,"mtime":1609702473765,"results":"15","hashOfConfig":"10"},{"size":967,"mtime":1609732337751,"results":"16","hashOfConfig":"10"},{"size":536,"mtime":1609727542198,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"upaepf",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"/mnt/c/Users/icecr/job/mvp/app/react-app/src/index.js",[],["39","40"],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/reportWebVitals.js",[],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/App.js",["41"],"import React from 'react'\nimport './App.css';\nimport Reddit from './Reddit.jsx'\nimport AltCoins from './AltCoins.jsx'\nimport Graph from './Graph.jsx'\nimport GraphOptions from './GraphOptions.jsx'\nimport GraphSearchBar from './GraphSearchBar.jsx'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      interval: '30min',\n      reddit: [],\n      stockGraph: [],\n      altCoinPrices: []\n    }\n    this.retrieveAdditionalData = this.retrieveAdditionalData.bind(this)\n  }\n\n\n  componentDidMount() {\n    this.retrieveInitialData()\n  }\n\n  retrieveInitialData() {\n    fetch('/api', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    })\n      .then(response => response.json())\n      .then((data) => {\n        data[0].map(d => {\n          let x = Math.random() * 256;\n          let y = Math.random() * 256;\n          let z = Math.random() * 256;\n          d.push([x, y, z])\n        })\n        this.setState({\n          reddit: data[0],\n          stockGraph: data[1],\n          altCoinPrices: data[2]\n        })\n      })\n  }\n\n  retrieveAdditionalData(ticker = this.state.stockGraph[0][2], interval = this.state.interval) {\n    console.log('click!', ticker, interval)\n    if (interval === 'daily' || interval === 'weekly') {\n      interval = `1${interval.substring(0,1)}`\n    }\n    this.setState({\n      interval: interval,\n    })\n    fetch(`/api/v1/quotes/stocks?ticker=${ticker}&interval=${interval}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    })\n      .then(response => response.json())\n      .then((data) => {\n        this.setState({\n          stockGraph: data\n        })\n      })\n      .catch((response) =>\n        window.alert(`could not retrieve ticker ${ticker} for specified interval ${interval}`)\n      )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"headerContainer\">\n          <h1>tradetheta</h1>\n        </div>\n        <div className=\"boxesContainer\">\n          <div className=\"numbers\">\n            <div className=\"graph-search-options-wrapper\">\n              <GraphOptions callback={this.retrieveAdditionalData} />\n              <GraphSearchBar />\n            </div>\n            <Graph data={this.state.stockGraph}\n              color=\"#B08EA2\"\n            />\n          </div>\n          <div className=\"bottom-chart-container\">\n            <div className=\"bottom-chart-wrapper\">\n              <Reddit data={this.state.reddit}\n                getTicker={this.retrieveAdditionalData}\n                title=\"reddit popularity\"\n              />\n            </div>\n            <div className=\"bottom-chart-wrapper\">\n              <AltCoins data={this.state.altCoinPrices}\n                title=\"Crypto Quotes\"\n                color=\"#70CAD1\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","/mnt/c/Users/icecr/job/mvp/app/react-app/src/Reddit.jsx",["42"],"import React from 'react'\r\nimport Chart from 'chart.js';\r\n\r\nclass Reddit extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartRef = React.createRef();\r\n  }\r\n\r\n  parseChartData() {\r\n    let chartData = []\r\n    this.props.data.map(d => {\r\n      let datapoint = {\r\n        label: d[3],\r\n        data: [{ 'x': d[1], 'y': d[0], 'r': d[0] < 10 ? d[0] : Math.log(d[0]) * 3 }],\r\n        backgroundColor: `rgba(${d[5].join(',')},0.5)`,\r\n        hoverBorderWidth: 8,\r\n        hoverBackgroundColor: `rgba(${d[5].join(',')},1)`,\r\n      }\r\n      chartData.push(datapoint);\r\n    });\r\n    return chartData;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.datasets = this.parseChartData();\r\n    this.myChart.update({ duration: 0 });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.chartRef.current, {\r\n      type: 'bubble',\r\n      data: {\r\n        datasets: this.parseChartData()\r\n      },\r\n      options: {\r\n        events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\r\n        onClick: (e) => {\r\n          let dataset = this.myChart.getDatasetAtEvent(e)\r\n          if (dataset.length > 0) {\r\n            let point = this.props.data[dataset[0]._datasetIndex][3];\r\n            this.props.getTicker(point)\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          yAxes: [{\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: 'weighted popularity'\r\n            },\r\n            type: 'logarithmic',\r\n            position: 'left',\r\n            ticks: {\r\n              min: 0, //minimum tick\r\n              max: 30000, //maximum tick\r\n              display: false,\r\n              callback: function (value, index, values) {\r\n                return Number(value.toString());//pass tick values as a string into Number function\r\n              },\r\n            },\r\n            afterBuildTicks: function (chartObj) { //Build ticks labelling as per your need\r\n              chartObj.ticks = [];\r\n            },\r\n            gridLines: {\r\n              tickMarkLength: 0// Adjusts the height for the tick marks area\r\n            }\r\n          }],\r\n          xAxes: [{\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: 'number of mentions'\r\n            },\r\n            type: 'logarithmic',\r\n            position: 'left',\r\n            ticks: {\r\n              display: false,\r\n              min: 0, //minimum tick\r\n              max: 8000, //maximum tick\r\n              callback: function (value, index, values) {\r\n                return value;\r\n              },\r\n            },\r\n            afterBuildTicks: function (chartObj) { //Build ticks labelling as per your need\r\n              chartObj.ticks = [];\r\n            }\r\n          }],\r\n        },\r\n        animation: {\r\n          duration: 1000,\r\n          easing: 'easeOutQuart'\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Reddit popularity</h3>\r\n        <canvas ref={this.chartRef} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Reddit;","/mnt/c/Users/icecr/job/mvp/app/react-app/src/AltCoins.jsx",[],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/Graph.jsx",[],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/GraphOptions.jsx",["43"],"import React, { useState, useEffect } from 'react'\r\nimport './GraphOptions.css'\r\n\r\nconst GraphOptions = ({callback}) => {\r\n  const timeOptions = ['5min', '15min', '30min', 'daily', 'weekly']\r\n\r\n  const[timeSelected, setTimeSelected] = useState(false)\r\n  const[timeValue, setValue] = useState({option: '30min'})\r\n\r\n  const handleTimeClick = (event) => {\r\n    event.preventDefault();\r\n    setValue((timeValue) => ({\r\n      ...timeValue,\r\n      option: event.target.value,\r\n    }));\r\n    setTimeSelected(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (timeSelected) {\r\n      console.log('clicked ', timeValue)\r\n      callback(undefined, timeValue.option)\r\n      setTimeSelected(false)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"options-bar-wrapper\">\r\n      {timeOptions.map(d => <button className={timeValue.option === d ? \"selectedButton\" : \"timeButton\"} key={d} value={d} onClick={handleTimeClick}>{d}</button>)}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default GraphOptions;","/mnt/c/Users/icecr/job/mvp/app/react-app/src/GraphSearchBar.jsx",["44"],"import React, { useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearchDollar } from '@fortawesome/free-solid-svg-icons'\r\nimport './GraphSearchBar.css';\r\n\r\nconst GraphSearchBar = () => {\r\n\r\n\r\n\r\n  return (\r\n    <form className=\"search-bar-wrapper\">\r\n      <label htmlFor=\"searchbar\"></label>\r\n      <input type=\"text\" name=\"searchbar\"></input>\r\n      <button className=\"icon\"><FontAwesomeIcon icon={faSearchDollar} /></button>\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\nexport default GraphSearchBar;",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":35,"column":23,"nodeType":"51","messageId":"52","endLine":35,"endColumn":25},{"ruleId":"49","severity":1,"message":"50","line":12,"column":27,"nodeType":"51","messageId":"52","endLine":12,"endColumn":29},{"ruleId":"53","severity":1,"message":"54","line":19,"column":3,"nodeType":"55","endLine":19,"endColumn":12,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":17,"nodeType":"55","messageId":"59","endLine":1,"endColumn":25},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTimeSelected'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [timeSelected, timeValue, callback] as a second argument to the useEffect Hook.","Identifier",["62"],"no-unused-vars","'useState' is defined but never used.","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Add dependencies array: [timeSelected, timeValue, callback]",{"range":"65","text":"66"},[689,689],", [timeSelected, timeValue, callback]"]