[{"/mnt/c/Users/icecr/job/mvp/app/react-app/src/index.js":"1","/mnt/c/Users/icecr/job/mvp/app/react-app/src/reportWebVitals.js":"2","/mnt/c/Users/icecr/job/mvp/app/react-app/src/App.js":"3","/mnt/c/Users/icecr/job/mvp/app/react-app/src/Reddit.jsx":"4","/mnt/c/Users/icecr/job/mvp/app/react-app/src/AltCoins.jsx":"5","/mnt/c/Users/icecr/job/mvp/app/react-app/src/Graph.jsx":"6","/mnt/c/Users/icecr/job/mvp/app/react-app/src/GraphOptions.jsx":"7","/mnt/c/Users/icecr/job/mvp/app/react-app/src/GraphSearchBar.jsx":"8","/mnt/c/Users/icecr/job/mvp/app/react-app/src/use-debounce.jsx":"9"},{"size":500,"mtime":1608621680425,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1608621680452,"results":"12","hashOfConfig":"11"},{"size":3586,"mtime":1610674139492,"results":"13","hashOfConfig":"11"},{"size":3117,"mtime":1610659253050,"results":"14","hashOfConfig":"11"},{"size":2375,"mtime":1610659435808,"results":"15","hashOfConfig":"11"},{"size":1249,"mtime":1609791016101,"results":"16","hashOfConfig":"11"},{"size":1004,"mtime":1609780906408,"results":"17","hashOfConfig":"11"},{"size":2382,"mtime":1610580611650,"results":"18","hashOfConfig":"11"},{"size":1304,"mtime":1610579188428,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"upaepf",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"/mnt/c/Users/icecr/job/mvp/app/react-app/src/index.js",[],["42","43"],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/reportWebVitals.js",[],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/App.js",["44"],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/Reddit.jsx",["45"],"import React from 'react'\r\nimport Chart from 'chart.js';\r\n\r\nclass Reddit extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartRef = React.createRef();\r\n  }\r\n\r\n  parseChartData() {\r\n    let chartData = []\r\n    this.props.data.map(d => {\r\n      let datapoint = {\r\n        label: d[3],\r\n        data: [{ 'x': d[1], 'y': d[0], 'r': d[0] < 10 ? d[0] : Math.log(d[0]) * 3 }],\r\n        backgroundColor: `rgba(${d[5].join(',')},0.5)`,\r\n        hoverBorderWidth: 8,\r\n        hoverBackgroundColor: `rgba(${d[5].join(',')},1)`,\r\n      }\r\n      chartData.push(datapoint);\r\n    });\r\n    return chartData;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.datasets = this.parseChartData();\r\n    this.myChart.update({ duration: 0 });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.chartRef.current, {\r\n      type: 'bubble',\r\n      data: {\r\n        datasets: this.parseChartData()\r\n      },\r\n      options: {\r\n        events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\r\n        onClick: (e) => {\r\n          let dataset = this.myChart.getDatasetAtEvent(e)\r\n          if (dataset.length > 0) {\r\n            let point = this.props.data[dataset[0]._datasetIndex][3];\r\n            this.props.getTicker(point)\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          yAxes: [{\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: 'weighted popularity'\r\n            },\r\n            type: 'logarithmic',\r\n            position: 'left',\r\n            ticks: {\r\n              min: 0, //minimum tick\r\n              max: 75000, //maximum tick\r\n              display: false,\r\n              callback: function (value, index, values) {\r\n                return Number(value.toString());//pass tick values as a string into Number function\r\n              },\r\n            },\r\n            afterBuildTicks: function (chartObj) { //Build ticks labelling as per your need\r\n              chartObj.ticks = [];\r\n            },\r\n            gridLines: {\r\n              tickMarkLength: 0// Adjusts the height for the tick marks area\r\n            }\r\n          }],\r\n          xAxes: [{\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: 'number of mentions'\r\n            },\r\n            type: 'logarithmic',\r\n            position: 'left',\r\n            ticks: {\r\n              display: false,\r\n              min: 0, //minimum tick\r\n              max: 25000, //maximum tick\r\n              callback: function (value, index, values) {\r\n                return value;\r\n              },\r\n            },\r\n            afterBuildTicks: function (chartObj) { //Build ticks labelling as per your need\r\n              chartObj.ticks = [];\r\n            }\r\n          }],\r\n        },\r\n        animation: {\r\n          duration: 1000,\r\n          easing: 'easeOutQuart'\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Reddit popularity</h3>\r\n        <canvas ref={this.chartRef} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Reddit;","/mnt/c/Users/icecr/job/mvp/app/react-app/src/AltCoins.jsx",[],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/Graph.jsx",[],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/GraphOptions.jsx",[],"/mnt/c/Users/icecr/job/mvp/app/react-app/src/GraphSearchBar.jsx",["46"],"import React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearchDollar } from '@fortawesome/free-solid-svg-icons'\r\nimport './GraphSearchBar.css';\r\nimport useDebounce from './use-debounce.jsx';\r\n\r\n\r\nconst GraphSearchBar = ({ callback, autosuggest, suggestionsArray }) => {\r\n  const [value, setValue] = useState('');\r\n  const [inputChange, setInputChange] = useState(false);\r\n  const [selectDropDown, setselectDropDown] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [suggestionsBool, setsuggestionsBool] = useState(false);\r\n\r\n\r\n  const handleInputChange = (e) => {\r\n    e.persist();\r\n    setValue(e.target.value.toUpperCase());\r\n    setInputChange(true);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSubmitted(true);\r\n  }\r\n\r\n   const handleSelection = (e) => {\r\n    setValue(e.target.innerHTML.toUpperCase())\r\n    setSuggestions([]);\r\n    setselectDropDown(true)\r\n   }\r\n\r\n  useEffect(() => {\r\n    console.log('use effect')\r\n    if (inputChange) {\r\n      console.log('input changed')\r\n      autosuggest(value)\r\n      setInputChange(false);\r\n      setsuggestionsBool(true)\r\n    } else if (selectDropDown) {\r\n      console.log('selectDropDown')\r\n      setselectDropDown(false)\r\n      setsuggestionsBool(false)\r\n    } else if (suggestionsBool) {\r\n      setSuggestions(suggestionsArray)\r\n    }\r\n  }, [inputChange, suggestionsArray, autosuggest, value, selectDropDown, suggestionsBool])\r\n\r\n  useEffect(() => {\r\n    if (submitted) {\r\n      console.log('submitted')\r\n      callback(value)\r\n      setSubmitted(false);\r\n      setValue('')\r\n    }\r\n  }, [submitted, callback, value])\r\n\r\n  return (\r\n    <form className=\"search-bar-wrapper\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n      <label htmlFor=\"searchbar\"></label>\r\n      <input type=\"text\" name=\"searchbar\" className=\"searchbar\" onChange={handleInputChange} value={value} placeholder=\"Type to search ticker\"></input>\r\n      <div className=\"autosuggestion-wrapper\">\r\n        {suggestions.map(a => <li key={a} className=\"autosuggestion-bullet\" value={a} onClick={handleSelection}>{a}</li>)}\r\n      </div>\r\n      <button className=\"icon\"><FontAwesomeIcon icon={faSearchDollar} /></button>\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\nexport default GraphSearchBar;","/mnt/c/Users/icecr/job/mvp/app/react-app/src/use-debounce.jsx",["47","48"],"import React, { useState, useEffect } from 'react';\r\n\r\n// Our hook\r\nexport default function useDebounce(value, delay) {\r\n  // State and setters for debounced value\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(\r\n    () => {\r\n      // Set debouncedValue to value (passed in) after the specified delay\r\n      const handler = setTimeout(() => {\r\n        setDebouncedValue(value);\r\n      }, delay);\r\n\r\n      // Return a cleanup function that will be called every time ...\r\n      // ... useEffect is re-called. useEffect will only be re-called ...\r\n      // ... if value changes (see the inputs array below).\r\n      // This is how we prevent debouncedValue from changing if value is ...\r\n      // ... changed within the delay period. Timeout gets cleared and restarted.\r\n      // To put it in context, if the user is typing within our app's ...\r\n      // ... search box, we don't want the debouncedValue to update until ...\r\n      // ... they've stopped typing for more than 500ms.\r\n      return () => {\r\n        clearTimeout(handler);\r\n      };\r\n    },\r\n    // Only re-call effect if value changes\r\n    // You could also add the \"delay\" var to inputs array if you ...\r\n    // ... need to be able to change that dynamically.\r\n    [value]\r\n  );\r\n\r\n  return debouncedValue;\r\n}\r\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":39,"column":23,"nodeType":"55","messageId":"56","endLine":39,"endColumn":25},{"ruleId":"53","severity":1,"message":"54","line":12,"column":27,"nodeType":"55","messageId":"56","endLine":12,"endColumn":29},{"ruleId":"57","severity":1,"message":"58","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":19},{"ruleId":"57","severity":1,"message":"61","line":1,"column":8,"nodeType":"59","messageId":"60","endLine":1,"endColumn":13},{"ruleId":"62","severity":1,"message":"63","line":30,"column":5,"nodeType":"64","endLine":30,"endColumn":12,"suggestions":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'useDebounce' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'delay'. Either include it or remove the dependency array.","ArrayExpression",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [delay, value]",{"range":"71","text":"72"},[1258,1265],"[delay, value]"]